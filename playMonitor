--[[
  playMonitor
  By SoniEx2
--]]

local args = {...} -- args table
if not args[2] then
  print("Usage: playMonitor <hasColor> <NBS file>")
  return
end

-- Define variables
local useColors
local played,played2=true,true
local delay,lenght
local side,textColor,bgColor,notesPlayed,row=0,1,2,0,0
-- Load SExAPI
os.loadAPI("SExAPI.lua")
local monitor = SEx.monitor.wrap("top")
local screenHalfWidth = monitor.getSize()/2
local sizeX,sizeY = monitor.getSize()

-- Should we use colors?
if monitor.isColor() and (args[1] == "true" or args[1] == "on" or args[1] == "1") then
  useColors = true
else
  useColors = false
end

-- Clear monitor so we can use it
monitor.clear()
monitor.setCursorPos(1,1)

-- Notes and instruments
local notenames = {"F#3"," G3","G#3"," A3","A#3"," B3",
" C4","C#4"," D4","D#4"," E4"," F4","F#4"," G4",
"G#4"," A4","A#4"," B4"," C5","C#5"," D5","D#5",
" E5"," F5","F#5"}
local instnames = {"PIANO","BASS DRUM","SNARE","CLICKS",
"BASS GUITAR"}

-- ID is the NoteBlock ID to use
local id=1
-- Modem stuff
local MODEM = peripheral.wrap("bottom")
local PERIPHERALS = MODEM.getNamesRemote()
local maxId = #(MODEM.getNamesRemote())

-- Make it so we can't change the monitor colors
if not useColors then
  monitor.setTextColor(colors.white)
  monitor.setBackgroundColor(colors.black)
  monitor.setTextColor = function() end
  monitor.setBackgroundColor = function() end
end

local nbsinsttomcinst = {
[1] = 0,
[2] = 4,
[3] = 1,
[4] = 2,
[5] = 3,
}

-- Main play function
local function play(inst,note)
  -- Remap NBS instruments to Iron Note Block instruments
  inst = nbsinsttomcinst[inst]
  -- Lua trick for inline if
  -- Check ID for overflow
  id = id > maxId and 1 or id
  -- Check textColor so it doesn't conflic with bgColor
  textColor = textColor * (textColor == bgColor and 2 or 1)
  -- Check textColor for overflow
  textColor = textColor >= colors.black and 1 or textColor
  -- Call note block
  MODEM.callRemote(PERIPHERALS[id],"playNote",inst,note)
  -- Do fancy printing of notes
  local str = instnames[inst+1] .." "..notenames[note+1]
  local _,pos = monitor.getCursorPos()
  monitor.setCursorPos(screenHalfWidth-(string.len(str)/2),pos)
  monitor.setTextColor(textColor)
  monitor.print(str)
  monitor.setTextColor(1)
  -- Increase ID, change text color, increase notes played
  id = id + 1
  textColor = textColor*2
  notesPlayed = notesPlayed + 1
end

-- THE FOLLOWING CODE IS A MESS!!!
local function load(file)
  os.loadAPI("nbs")
  os.loadAPI("ats")
  local startTime = os.clock()
  local wait = ats.makesleeper()
  local tSong = assert(nbs.load(file))
  delay = tSong.delay
  lenght = tSong.lenght
  realLenght = lenght * (1/delay)
  local header = "Now playing: "..file
  local headerXPos = screenHalfWidth-(header:len()/2)
  local footer = ""
  do
    local str1 = maxId .. " note blocks connected"
    local str2 = 1/delay .. " TPS"
    footer = str1 .. string.rep(" ",monitor.getSize()-#(str1 .. str2)) .. str2
  end
  currentTime = os.clock()
  for a,b in pairs(tSong) do
    if type(b)=="table" then
      for inst,d in pairs(b) do
        -- Change BG color, clear screen, write header, write footer
        if played==true then
          played=false
          bgColor = textColor
          monitor.setBackgroundColor(bgColor)
          monitor.clear()
	  -- This is for large filenames... We don't
	  -- want the monitor eating them...
          if headerXPos<1 then
            monitor.setCursorPos(1,1)
          else
            monitor.setCursorPos(headerXPos,1)
          end
          monitor.print(header)
          local posX,posY = monitor.getCursorPos()
          -- Write footer
          monitor.setCursorPos(1,sizeY)
          monitor.write(footer)
	  monitor.setCursorPos(posX,posY)
        end
        for e,note in pairs(d) do
	  -- Play notes
          play(inst,note)
        end
	--[[
	  This lets the code clear the screen
	  once we're done playing all the notes.
	  It also removes notes flashing, decreasing
	  seizure risk when colors are disabled.
	--]]
        played2=true
      end
      -- This is part of the above
      if played2==true then
        played=true
        played2=false
      end
      --[[
        Here we update the footer
        We do it here (and before the delay) so it
        doesn't flash when we play notes
      --]]
      monitor.setCursorPos(1,sizeY-1)
      monitor.clearLine()
      monitor.write(notesPlayed .. " notes played (" .. math.floor(row/realLenght*1000)/10 .."% completed)")
      wait(delay)
      row = row + 1
      -- Put a button in front of the
      -- computer to stop the song.
      if rs.getInput("front") then
        return
      end
    end
  end
  local x = os.clock() - startTime
  print("Total time: ", x)
  local avgtps = row / x
  print("Average TPS: ", avgtps)
  local diff = avgtps - (1/delay)
  if diff >= 0.05 or diff <= -0.05 then
    print("WARNING")
    print("Song was expected to play at an average TPS of ", 1/delay)
    print("Unless you've changed game tick rate, THIS IS A BUG!")
    print("Report it at https://github.com/SoniEx2/NBSPlayer")
  end
end
-- Here we run the code above with our file (stored in args[2])
load(args[2])
local _,pos = monitor.getCursorPos()
monitor.setCursorPos(1,pos)
-- Press the button in front of the computer to exit!
while not rs.getInput("front") do
  os.pullEvent("redstone")
end
